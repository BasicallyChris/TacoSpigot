From 4b6f35f54e82af3346cd013dc1c0d465f58aa2ed Mon Sep 17 00:00:00 2001
From: Vml11 <victorbcn98@gmail.com>
Date: Fri, 6 Apr 2018 18:42:52 +0200
Subject: [PATCH] Added-left-shooting-control


diff --git a/src/main/java/me/torciv/fluxspigot/FluxSpigotWorldConfig.java b/src/main/java/me/torciv/fluxspigot/FluxSpigotWorldConfig.java
index 72a3f9df4..f69940e1d 100644
--- a/src/main/java/me/torciv/fluxspigot/FluxSpigotWorldConfig.java
+++ b/src/main/java/me/torciv/fluxspigot/FluxSpigotWorldConfig.java
@@ -79,10 +79,16 @@ public class FluxSpigotWorldConfig {
 
     public boolean fixLeftShooting;
     private void fixLeftShooting(){
-        fixLeftShooting = getBoolean("cannons.fix-left-shooting-cannoning", false);
+        fixLeftShooting = getBoolean("cannons.fix-left-shooting-cannoning", true);
         if(fixLeftShooting) log("fixing left-Shooting cannoning");
     }
 
+    public double leftShootingAccurancy;
+    private void leftShootingAccurancy(){
+        leftShootingAccurancy = getDouble("cannons.left-shooting-accurancy", 120.0);
+        if(fixLeftShooting) log("leftShootingAcurancy set to " + leftShootingAccurancy);
+    }
+
     public boolean fireTNTDispenseEvent;
     private void fireTNTDispenseEvent(){
         fireTNTDispenseEvent = getBoolean("cannons.fire-tnt-dispense-event", true);
diff --git a/src/main/java/me/torciv/fluxspigot/utils/Util.java b/src/main/java/me/torciv/fluxspigot/utils/Util.java
new file mode 100644
index 000000000..21d2414ee
--- /dev/null
+++ b/src/main/java/me/torciv/fluxspigot/utils/Util.java
@@ -0,0 +1,27 @@
+package me.torciv.fluxspigot.utils;
+
+import net.minecraft.server.EntityFallingBlock;
+import org.bukkit.Location;
+
+public class Util {
+
+    public static double fallingBlockTravelDistance(EntityFallingBlock entity){
+        double distance = -1.0;
+        double from [] = new double [2];
+        double to [] = new double [2];
+
+        Location spawn = entity.sourceLoc;
+        from[0] = spawn.getX();
+        from[1] = spawn.getZ();
+
+        to[0] = entity.locX;
+        to[1] = entity.locZ;
+        distance = calculateDistance(from,to);
+
+        return distance;
+    }
+
+    private static double calculateDistance(double[] from, double [] to){
+        return Math.sqrt(((Math.pow((to[0]-from[0]),2) + Math.pow((to[1]-from[1]),2))));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index e3bfd8683..99c82d6fd 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -18,6 +18,8 @@ public class EntityFallingBlock extends Entity {
     public NBTTagCompound tileEntityData;
     public org.bukkit.Location sourceLoc; // PaperSpigot
 
+    public boolean traveledTooFar = false;
+
     // PaperSpigot start - Add FallingBlock source location API
     public EntityFallingBlock(World world) {
         this(null, world);
@@ -104,6 +106,8 @@ public class EntityFallingBlock extends Entity {
             this.motX *= 0.9800000190734863D;
             this.motY *= 0.9800000190734863D;
             this.motZ *= 0.9800000190734863D;
+
+
             if (!this.world.isClientSide) {
                 blockposition = new BlockPosition(this);
                 if (this.onGround) {
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index f4ccd8d4d..b9375223a 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -3,17 +3,15 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-
-// CraftBukkit start
-import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.event.entity.EntityExplodeEvent;
+import me.torciv.fluxspigot.utils.Util;
 import org.bukkit.Location;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.block.BlockExplodeEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
+
+import java.util.*;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class Explosion {
@@ -147,15 +145,44 @@ public class Explosion {
                         // CraftBukkit end
                         double d14 = entity instanceof EntityHuman && world.paperSpigotConfig.disableExplosionKnockback ? 0 : EnchantmentProtection.a(entity, d13); // PaperSpigot
 
-                        // PaperSpigot start - Fix cannons
                         /*
-                        entity.motX += d8 * d14;
-                        entity.motY += d9 * d14;
-                        entity.motZ += d10 * d14;
-                        */
-                        // This impulse method sets the dirty flag, so clients will get an immediate velocity update
-                        entity.g(d8 * d14, d9 * d14, d10 * d14);
-                        // PaperSpigot end
+                          d14 corresponds to the velocity applied so that if is human and paperSpigotKnoback
+                          is enabled: Then the velocity will be multiplied by 0
+                          In other entities is another value that can vary.
+
+                          We will use this idea To our FluxSpigot LeftShooting patch
+                         */
+
+                        // FluxSpigot LeftShooting Patch
+                        if(!world.fluxSpigotConfig.fixLeftShooting){
+                            // PaperSpigot start - Fix cannons
+                            /*
+                            entity.motX += d8 * d14;
+                            entity.motY += d9 * d14;
+                            entity.motZ += d10 * d14;
+                            */
+                            // This impulse method sets the dirty flag, so clients will get an immediate velocity update
+                            entity.g(d8 * d14, d9 * d14, d10 * d14);
+                            // PaperSpigot end
+                        }else{
+                            if(entity instanceof  EntityFallingBlock){
+                                EntityFallingBlock entityFallingBlock = (EntityFallingBlock) entity;
+                                if(!entityFallingBlock.traveledTooFar){
+                                    double traveled = Util.fallingBlockTravelDistance(entityFallingBlock);
+                                    if(traveled >= world.fluxSpigotConfig.leftShootingAccurancy){ // Check accurancy
+                                        entity.g(0.0D, d9 * d14, 0.0D); // Cancel X & Z Velocity
+                                        entityFallingBlock.traveledTooFar = true;
+                                    }else{
+                                        entity.g(d8 * d14, d9 * d14, d10 * d14); // Default velocity
+                                    }
+                                }else{
+                                    entity.g(0.0D, d9 * d14, 0.0D); // Cancel X & Z Velocity
+                                }
+                            }else{
+                                entity.g(d8 * d14, d9 * d14, d10 * d14); // Default velocity
+                            }
+                        }
+                        // End FluxSpigot LeftShooting Patch
 
                         if (entity instanceof EntityHuman && !((EntityHuman) entity).abilities.isInvulnerable && !world.paperSpigotConfig.disableExplosionKnockback) { // PaperSpigot
                             this.k.put((EntityHuman) entity, new Vec3D(d8 * d13, d9 * d13, d10 * d13));
@@ -198,6 +225,7 @@ public class Explosion {
 
             boolean cancelled;
             List<org.bukkit.block.Block> bukkitBlocks;
+            List<org.bukkit.entity.Entity> entities = Lists.newArrayList();
             float yield;
 
             if (explode != null) {
@@ -225,6 +253,7 @@ public class Explosion {
                 this.wasCanceled = true;
                 return;
             }
+
             // CraftBukkit end
             iterator = this.blocks.iterator();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index db915033b..25391ccfd 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1,16 +1,9 @@
 package org.bukkit.craftbukkit.event;
 
-import java.net.InetAddress;
-import java.util.ArrayList;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
-
 import net.minecraft.server.*;
-
+import net.minecraft.server.Entity;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Server;
@@ -32,19 +25,7 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftMetaBook;
 import org.bukkit.craftbukkit.util.CraftDamageSource;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.entity.Arrow;
-import org.bukkit.entity.Creeper;
-import org.bukkit.entity.EntityType;
-import org.bukkit.entity.Firework;
-import org.bukkit.entity.Horse;
-import org.bukkit.entity.LightningStrike;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Pig;
-import org.bukkit.entity.PigZombie;
-import org.bukkit.entity.Player;
-import org.bukkit.entity.Projectile;
-import org.bukkit.entity.ThrownExpBottle;
-import org.bukkit.entity.ThrownPotion;
+import org.bukkit.entity.*;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.*;
@@ -61,6 +42,12 @@ import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.meta.BookMeta;
 
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+
 public class CraftEventFactory {
     public static final DamageSource MELTING = CraftDamageSource.copyOf(DamageSource.BURN);
     public static final DamageSource POISON = CraftDamageSource.copyOf(DamageSource.MAGIC);
-- 
2.13.0.windows.1

